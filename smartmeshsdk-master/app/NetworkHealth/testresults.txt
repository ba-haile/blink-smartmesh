
============================= 2019-04-19 10:24:53 =============================


=== name ==============

_nettest_multipleJoins

=== outcome ===========

PASS

=== description =======

PASS:
- 00-17-0d-00-00-31-c1-a1 has no numOperationalEvents parameters, but its state is 4
- 00-17-0d-00-00-31-cc-40 has no numOperationalEvents parameters, but its state is 4
- 00-17-0d-00-00-38-06-d5 has no numOperationalEvents parameters, but its state is 4

=== about this test ===


        
            This test verifies that each mote has joined exactly once.
        
        
            In a normal deployment, all motes should join exactly once. Joining
            more than once may indicate a mote reset.
        
        
            This test is run once for each node in the network (both AP and
            mote).
        
        

=== name ==============

_nettest_networkAvailability

=== outcome ===========

NOTRUN

=== description =======

This test could not run because no packets were sent in the network (yet?) (numTxOk==0 for the network) and so it is impossible to calculate a ratio.

=== about this test ===


        
            This test verifies that the overall network availability is above 
            MIN_NETWORKAVAILABILITY.
        
        
            The network availability is the portion of the packets generated by
            the motes' apps, which were actually sent into the network. If the
            protocol stack is busy, it will reject the application's data,
            resulting in a lower availability.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_networkReliability

=== outcome ===========

PASS

=== description =======

networkReliability=1.0 is better than the expected 0.999

=== about this test ===


        
            This test erifies that the overall network reliability is above 
            MIN_NETWORKRELIABILITY.
        
        
            The network reliability is the portion of the packets injected into
            the network that were received by their final destination. If the
            network looses data, the network reliability goes down.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_numGoodNeighbors

=== outcome ===========

FAIL

=== description =======

FAIL:
mote 00-17-0d-00-00-31-c1-a1 has 1 good neighbors, expected at least 3.
mote 00-17-0d-00-00-31-cc-40 has 1 good neighbors, expected at least 3.
mote 00-17-0d-00-00-38-06-d5 has 2 good neighbors, expected at least 3.

=== about this test ===


        
            This test verifies that each mote has enough good neighbors.
        
        
            The manager can build a robust network if each mote in the network
            has at least MIN_NUMGOODNEIGHBORS neighbors.
        
        
            This test is run once for each mote in the network.
        
        

=== name ==============

_nettest_numLinks

=== outcome ===========

PASS

=== description =======

PASS:
mote 00-17-0d-00-00-31-c1-a1 has 4 links, less than maximum 180
mote 00-17-0d-00-00-31-cc-40 has 4 links, less than maximum 180
AP 00-17-0d-00-00-38-06-d5 has 4 RX links, less than maximum 140

=== about this test ===


        
            This test verifies that the number of links assigned to each mote
            does not exceed the maximum limit.
        
        
            The manager is never supposed to allocate more than MAX_AP_RXLINKS
            receive links to the AP, nor more than MAX_MOTE_LINKS links (both
            transmit and receive) for a non-AP mote.
        
        
            This test is run once for each node in the network (both AP and
            mote).
        
        

=== name ==============

_nettest_oneSingleParentMote

=== outcome ===========

PASS

=== description =======

PASS:
only mote 00-17-0d-00-00-31-cc-40 has a single parent

=== about this test ===


        
            This test verifies that there is exactly mote with only one parent.
        
        
            Graph theory indicates that, when building a bi-DAG, exactly one
            node ends up with one parent (it will be a one-hop neighbor of the
            root). This test verifies that this is the case in this network.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_perMoteAvailability

=== outcome ===========

NOTRUN

=== description =======

NOTRUN:
This test could not run because mote 00-17-0d-00-00-31-c1-a1 did not report any numTxOk counter (the counters it did report are ['macAddress', 'reserved', 'numJoins', 'requestedBw', 'totalNeededBw', 'numNbrs', 'isAP', 'assignedBw', 'stateTime', 'numGoodNbrs', 'packetsReceived', 'hopDepth', 'state', 'isRouting', 'avgLatency', 'RC', 'moteId', 'packetsLost']).
This test could not run because mote 00-17-0d-00-00-31-cc-40 did not report any numTxOk counter (the counters it did report are ['macAddress', 'reserved', 'numJoins', 'requestedBw', 'totalNeededBw', 'numNbrs', 'isAP', 'assignedBw', 'stateTime', 'numGoodNbrs', 'packetsReceived', 'hopDepth', 'state', 'isRouting', 'avgLatency', 'RC', 'moteId', 'packetsLost']).

=== about this test ===


        
            This test verifies that the availability for each mote is above 
            MIN_MOTEAVAILABILITY.
        
        
            The mote availability is the portion of the packets generated by
            the mote's application which were actually sent into the network.
            If the mote's protocol stack is busy, it will reject the
            application's data, resulting in a lower availability.
        
        
            This test is run once for each mote in the network.
        
        

=== name ==============

_nettest_stabilityVsRssi

=== outcome ===========

NOTRUN

=== description =======



=== about this test ===


        
            This test verifies that stability of a path is plausible given its
            RSSI.
        
        
            In the absence of heavy interference, the is a straightforward
            relationship between the RSSI and stability of a path:
            
                if the RSSI is above THRES_HIGH_RSSI, the stability is
                expected to be above THRES_HIGH_STAB.
                if the RSSI is below THRES_LOW_RSSI, the stability is expected to
                be below THRES_LOW_STAB.
            
        
        
            The stability is calculated as the ratio between the number of
            packets transmitted successfully and transmission attempts; it is
            also known as Packet Delivery Ratio (PDR).
        
        
            This test is run once for each path in the network over which at
            least THRES_NUM_PACKETS packet have been transmitted.
        
        
============================= 2019-04-19 10:25:17 =============================


=== name ==============

_nettest_multipleJoins

=== outcome ===========

PASS

=== description =======

PASS:
- 00-17-0d-00-00-31-c1-a1 has no numOperationalEvents parameters, but its state is 4
- 00-17-0d-00-00-31-cc-40 has no numOperationalEvents parameters, but its state is 4
- 00-17-0d-00-00-38-06-d5 has no numOperationalEvents parameters, but its state is 4

=== about this test ===


        
            This test verifies that each mote has joined exactly once.
        
        
            In a normal deployment, all motes should join exactly once. Joining
            more than once may indicate a mote reset.
        
        
            This test is run once for each node in the network (both AP and
            mote).
        
        

=== name ==============

_nettest_networkAvailability

=== outcome ===========

NOTRUN

=== description =======

This test could not run because no packets were sent in the network (yet?) (numTxOk==0 for the network) and so it is impossible to calculate a ratio.

=== about this test ===


        
            This test verifies that the overall network availability is above 
            MIN_NETWORKAVAILABILITY.
        
        
            The network availability is the portion of the packets generated by
            the motes' apps, which were actually sent into the network. If the
            protocol stack is busy, it will reject the application's data,
            resulting in a lower availability.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_networkReliability

=== outcome ===========

PASS

=== description =======

networkReliability=1.0 is better than the expected 0.999

=== about this test ===


        
            This test erifies that the overall network reliability is above 
            MIN_NETWORKRELIABILITY.
        
        
            The network reliability is the portion of the packets injected into
            the network that were received by their final destination. If the
            network looses data, the network reliability goes down.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_numGoodNeighbors

=== outcome ===========

FAIL

=== description =======

FAIL:
mote 00-17-0d-00-00-31-c1-a1 has 1 good neighbors, expected at least 3.
mote 00-17-0d-00-00-31-cc-40 has 1 good neighbors, expected at least 3.
mote 00-17-0d-00-00-38-06-d5 has 2 good neighbors, expected at least 3.

=== about this test ===


        
            This test verifies that each mote has enough good neighbors.
        
        
            The manager can build a robust network if each mote in the network
            has at least MIN_NUMGOODNEIGHBORS neighbors.
        
        
            This test is run once for each mote in the network.
        
        

=== name ==============

_nettest_numLinks

=== outcome ===========

PASS

=== description =======

PASS:
mote 00-17-0d-00-00-31-c1-a1 has 4 links, less than maximum 180
mote 00-17-0d-00-00-31-cc-40 has 4 links, less than maximum 180
AP 00-17-0d-00-00-38-06-d5 has 4 RX links, less than maximum 140

=== about this test ===


        
            This test verifies that the number of links assigned to each mote
            does not exceed the maximum limit.
        
        
            The manager is never supposed to allocate more than MAX_AP_RXLINKS
            receive links to the AP, nor more than MAX_MOTE_LINKS links (both
            transmit and receive) for a non-AP mote.
        
        
            This test is run once for each node in the network (both AP and
            mote).
        
        

=== name ==============

_nettest_oneSingleParentMote

=== outcome ===========

PASS

=== description =======

PASS:
only mote 00-17-0d-00-00-31-cc-40 has a single parent

=== about this test ===


        
            This test verifies that there is exactly mote with only one parent.
        
        
            Graph theory indicates that, when building a bi-DAG, exactly one
            node ends up with one parent (it will be a one-hop neighbor of the
            root). This test verifies that this is the case in this network.
        
        
            This test is run once for the whole network.
        
        

=== name ==============

_nettest_perMoteAvailability

=== outcome ===========

NOTRUN

=== description =======

NOTRUN:
This test could not run because mote 00-17-0d-00-00-31-c1-a1 did not report any numTxOk counter (the counters it did report are ['macAddress', 'reserved', 'numJoins', 'requestedBw', 'totalNeededBw', 'numNbrs', 'isAP', 'assignedBw', 'stateTime', 'numGoodNbrs', 'packetsReceived', 'hopDepth', 'state', 'isRouting', 'avgLatency', 'RC', 'moteId', 'packetsLost']).
This test could not run because mote 00-17-0d-00-00-31-cc-40 did not report any numTxOk counter (the counters it did report are ['macAddress', 'reserved', 'numJoins', 'requestedBw', 'totalNeededBw', 'numNbrs', 'isAP', 'assignedBw', 'stateTime', 'numGoodNbrs', 'packetsReceived', 'hopDepth', 'state', 'isRouting', 'avgLatency', 'RC', 'moteId', 'packetsLost']).

=== about this test ===


        
            This test verifies that the availability for each mote is above 
            MIN_MOTEAVAILABILITY.
        
        
            The mote availability is the portion of the packets generated by
            the mote's application which were actually sent into the network.
            If the mote's protocol stack is busy, it will reject the
            application's data, resulting in a lower availability.
        
        
            This test is run once for each mote in the network.
        
        

=== name ==============

_nettest_stabilityVsRssi

=== outcome ===========

NOTRUN

=== description =======



=== about this test ===


        
            This test verifies that stability of a path is plausible given its
            RSSI.
        
        
            In the absence of heavy interference, the is a straightforward
            relationship between the RSSI and stability of a path:
            
                if the RSSI is above THRES_HIGH_RSSI, the stability is
                expected to be above THRES_HIGH_STAB.
                if the RSSI is below THRES_LOW_RSSI, the stability is expected to
                be below THRES_LOW_STAB.
            
        
        
            The stability is calculated as the ratio between the number of
            packets transmitted successfully and transmission attempts; it is
            also known as Packet Delivery Ratio (PDR).
        
        
            This test is run once for each path in the network over which at
            least THRES_NUM_PACKETS packet have been transmitted.
        
        